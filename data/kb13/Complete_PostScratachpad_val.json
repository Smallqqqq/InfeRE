{"translation": {"en": "lines having words ending with <M0> .", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=endwith(<m0>)<STEP>result3=and(result1,result2)<STEP>result4=contain(result3)"}}{"translation": {"en": "lines that end with <M0> and include the phrase <M1> .", "regex": "result1=endwith(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines that contain at least 1 word without any vowels .", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=contain(<vow>)<STEP>result3=not(result2)<STEP>result4=and(result1,result3)<STEP>result5=contain(result4)"}}{"translation": {"en": "lines that utilize <M0> following words starting with <M1> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m1>,result1)<STEP>result3=contain(result2)<STEP>result4=startwith(<m0>)<STEP>result5=concat(result3,result4)"}}{"translation": {"en": "lines that include words starting with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(<let>,result1)<STEP>result3=startwith(<m0>)<STEP>result4=and(result2,result3)<STEP>result5=contain(result4)"}}{"translation": {"en": "lines containing words that begin with <M0> and end with <M1>", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1,<m1>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines using a 5 letter sequence", "regex": "result1=repeat(<let>,5)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines that list the word <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines which have the word <M0> and a number", "regex": "result1=contain(<m0>)<STEP>result2=contain(<num>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines that have 10 words .", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=contain(result1)<STEP>result3=repeat(result2,10)"}}{"translation": {"en": "lines that contain a 9 letter word .", "regex": "result1=repeat(<let>,9)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines that contain 3 letter words .", "regex": "result1=repeat(<let>,3)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines that use the word <M0>", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines containing <M0> before <M1>", "regex": "result1=contain(<m0>)<STEP>result2=startwith(<m1>)<STEP>result3=concat(result1,result2)"}}{"translation": {"en": "lines that contain any numbers .", "regex": "result1=contain(<num>)"}}{"translation": {"en": "lines using <M0> in the middle of a word .", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=repeatatleast(<let>,1)<STEP>result3=concat(result1,<m0>,result2)<STEP>result4=contain(result3)"}}{"translation": {"en": "4 letter lines", "regex": "result1=repeat(<let>,4)"}}{"translation": {"en": "lines containing <M0> or <M1> before <M2> or <M3>", "regex": "result1=or(<m0>,<m1>)<STEP>result2=contain(result1)<STEP>result3=or(<m2>,<m3>)<STEP>result4=startwith(result3)<STEP>result5=concat(result2,result4)"}}{"translation": {"en": "lines containing <M0> and containing <M1> too", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines that end in <M0>", "regex": "result1=endwith(<m0>)"}}{"translation": {"en": "lines using more than 3 characters", "regex": "result1=repeatatleast(<any>,4)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines that contain at least 1 digit .", "regex": "result1=contain(<num>)"}}{"translation": {"en": "lines that contain the number <M0> and <M1> and begin with <M2> .", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=startwith(<m2>)<STEP>result4=and(result1,result2,result3)"}}{"translation": {"en": "lines containing <M0> and containing a <M1> as well .", "regex": "result1=contain(<m0>)<STEP>result2=endwith(result1)<STEP>result3=contain(<m1>)<STEP>result4=startwith(result3)<STEP>result5=and(result2,result4)"}}{"translation": {"en": "lines that include both <M0> and <M1> .", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines that include words starting with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that contain <M0> and <M1> but not <M2> .", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=contain(<m2>)<STEP>result4=not(result3)<STEP>result5=and(result1,result2,result4)"}}{"translation": {"en": "lines which contain <M0> and <M1> .", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines that mention <M0> but not <M1> .", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=not(result2)<STEP>result4=and(result1,result3)"}}{"translation": {"en": "lines that contain words starting in <M0>", "regex": "result1=star(<let>)<STEP>result2=concat(<let>,result1)<STEP>result3=startwith(<m0>)<STEP>result4=and(result2,result3)<STEP>result5=contain(result4)"}}{"translation": {"en": "lines that contain at least 1 word and the number <M0>", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=contain(result1)<STEP>result3=endwith(result2)<STEP>result4=contain(<m0>)<STEP>result5=startwith(result4)<STEP>result6=and(result3,result5)"}}{"translation": {"en": "lines that contain <M0> after <M1> or <M2> .", "regex": "result1=or(<m1>,<m2>)<STEP>result2=contain(result1)<STEP>result3=startwith(<m0>)<STEP>result4=concat(result2,result3)"}}{"translation": {"en": "lines containing the word <M0>", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines that contain <M0> or <M1> .", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=or(result1,result2)"}}{"translation": {"en": "lines that contain 6 letter words beginning with the letter <M0> .", "regex": "result1=repeat(<let>,5)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that are composed of 4 or more words .", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=contain(result1)<STEP>result3=repeatatleast(result2,4)"}}{"translation": {"en": "lines which start with <M0>", "regex": "result1=startwith(<m0>)"}}{"translation": {"en": "lines that end with vowels .", "regex": "result1=endwith(<vow>)"}}{"translation": {"en": "lines that contain words that have the letter <M0> occuring after the letter <M1> .", "regex": "result1=concat(<m0>,<m1>)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines containing <M0> or <M1> before <M2> or <M3>", "regex": "result1=or(<m0>,<m1>)<STEP>result2=contain(result1)<STEP>result3=or(<m2>,<m3>)<STEP>result4=startwith(result3)<STEP>result5=concat(result2,result4)"}}{"translation": {"en": "lines containing the text <M0>", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines that have words ending in <M0>", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<m0>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that contain at least 2 digits .", "regex": "result1=contain(<num>)<STEP>result2=repeatatleast(result1,2)"}}{"translation": {"en": "lines that contain at least 2 words starting with <M0> in them .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)<STEP>result4=repeat(result3,2)"}}{"translation": {"en": "lines that match the words <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines that contain 3 words with at least 1 number in between the 1st and 3rd word .", "regex": "result1=notcc(<let>)<STEP>result2=star(result1)<STEP>result3=repeatatleast(<let>,1)<STEP>result4=repeatatleast(<let>,1)<STEP>result5=contain(result4)<STEP>result6=contain(<num>)<STEP>result7=and(result5,result6)<STEP>result8=repeatatleast(<let>,1)<STEP>result9=notcc(<let>)<STEP>result10=star(result9)<STEP>result11=concat(result2,result3,result7,result8,result10)"}}{"translation": {"en": "lines that contain 5 words", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=contain(result1)<STEP>result3=repeat(result2,5)"}}{"translation": {"en": "lines that have <M0> after <M1> or <M2> .", "regex": "result1=or(<m1>,<m2>)<STEP>result2=contain(result1)<STEP>result3=startwith(<m0>)<STEP>result4=concat(result2,result3)"}}{"translation": {"en": "lines ending in <M0>", "regex": "result1=endwith(<m0>)"}}{"translation": {"en": "lines containing 1 instance of <M0> followed by an <M1> or a <M2>", "regex": "result1=contain(<m0>)<STEP>result2=or(<m1>,<m2>)<STEP>result3=startwith(result2)<STEP>result4=concat(result1,result3)<STEP>result5=contain(result4)"}}{"translation": {"en": "lines using <M0> or <M1>", "regex": "result1=or(<m0>,<m1>)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines using the word <M0> or the word <M1>", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=or(result1,result2)"}}{"translation": {"en": "lines that start with <M0> or <M1>", "regex": "result1=or(<m0>,<m1>)<STEP>result2=startwith(result1)"}}{"translation": {"en": "find lines that mention dogs or cats but not any with mice", "regex": "result1=or(<m0>,<m1>)<STEP>result2=contain(result1)<STEP>result3=contain(<m2>)<STEP>result4=not(result3)<STEP>result5=and(result2,result4)"}}{"translation": {"en": "lines that contain the number <M0> at least twice .", "regex": "result1=contain(<m0>)<STEP>result2=repeat(result1,2)"}}{"translation": {"en": "lines using <M0>", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines containing instances of <M0> found after <M1>", "regex": "result1=contain(<m1>)<STEP>result2=startwith(<m0>)<STEP>result3=concat(result1,result2)"}}{"translation": {"en": "lines containing <M0> and also containing <M1>", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines that use words ending in <M0>", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<m0>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines containing words that start with <M0> and end with <M1> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1,<m1>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines having words ending with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<m0>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines using words ending in <M0>", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<m0>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that contain words with <M0> .", "regex": "result1=star(<let>)<STEP>result2=star(<let>)<STEP>result3=concat(result1,<m0>,result2)<STEP>result4=contain(result3)"}}{"translation": {"en": "lines with no vowels", "regex": "result1=contain(<vow>)<STEP>result2=not(result1)"}}{"translation": {"en": "lines containing usage of the word <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines using a word of 5 letters or less .", "regex": "result1=repeatrange(<let>,1,5)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines using words that end with the letter <M0>", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<m0>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that start with <M0> .", "regex": "result1=startwith(<m0>)"}}{"translation": {"en": "lines which contain <M0>", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines using <M0> , <M1> , or <M2>", "regex": "result1=or(<m0>,<m1>,<m2>)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines having words with <M0> .", "regex": "result1=star(<let>)<STEP>result2=star(<let>)<STEP>result3=concat(result1,<m0>,result2)<STEP>result4=contain(result3)"}}{"translation": {"en": "lines containing either a <M0> or <M1> character .", "regex": "result1=or(<m0>,<m1>)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines starting with <M0>", "regex": "result1=startwith(<m0>)"}}{"translation": {"en": "lines using at least 3 <M0>", "regex": "result1=contain(<m0>)<STEP>result2=repeatatleast(result1,3)"}}{"translation": {"en": "lines using <M0> or <M1>", "regex": "result1=or(<m0>,<m1>)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines which contain both <M0> and <M1> but no instances of <M2> .", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=contain(<m2>)<STEP>result4=not(result3)<STEP>result5=and(result1,result2,result4)"}}{"translation": {"en": "lines with <M1> where the word <M0> does not appear before <M1> in that line .", "regex": "result1=contain(<m1>)<STEP>result2=contain(<m0>)<STEP>result3=startwith(<m1>)<STEP>result4=concat(result2,result3)<STEP>result5=not(result4)<STEP>result6=and(result1,result5)"}}{"translation": {"en": "lines that contain 3 numbers and 1 number contains 1 .", "regex": "result1=contain(<num>)<STEP>result2=repeat(result1,3)<STEP>result3=contain(<num>)<STEP>result4=and(result2,result3)"}}{"translation": {"en": "lines that contain words starting with a vowel and ending with a vowel .", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=startwith(<vow>)<STEP>result3=endwith(<vow>)<STEP>result4=and(result1,result2,result3)<STEP>result5=contain(result4)"}}{"translation": {"en": "lines using words beginning with the letter <M0>", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that end in an <M0>", "regex": "result1=endwith(<m0>)"}}{"translation": {"en": "lines that have less than 6 words but more than 3 words .", "regex": "result1=notcc(<let>)<STEP>result2=star(result1)<STEP>result3=repeatatleast(<let>,1)<STEP>result4=notcc(<let>)<STEP>result5=star(result4)<STEP>result6=concat(result2,result3,result5)<STEP>result7=repeatrange(result6,0,5)<STEP>result8=repeatatleast(<let>,1)<STEP>result9=contain(result8)<STEP>result10=repeatatleast(result9,4)<STEP>result11=and(result7,result10)"}}{"translation": {"en": "lines using 3 instances of <M0>", "regex": "result1=contain(<m0>)<STEP>result2=repeat(result1,3)<STEP>result3=contain(result2)"}}{"translation": {"en": "3 letter lines starting with <M0>", "regex": "result1=repeat(<let>,2)<STEP>result2=concat(<m0>,result1)"}}{"translation": {"en": "lines containing the word <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines that end with <M0>", "regex": "result1=endwith(<m0>)"}}{"translation": {"en": "lines that utilize words starting with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that contain <M0> and <M1>", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines that have 1 number", "regex": "result1=contain(<num>)"}}{"translation": {"en": "lines that contain the word <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines that use a numerical number .", "regex": "result1=contain(<num>)"}}{"translation": {"en": "lines using <M0> immediately after <M1>", "regex": "result1=endwith(<m1>)<STEP>result2=startwith(<m0>)<STEP>result3=concat(result1,result2)"}}{"translation": {"en": "lines that end with <M0> .", "regex": "result1=endwith(<m0>)"}}{"translation": {"en": "lines utilizing <M0>", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines that match to the text <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines any words beginning with the letter <M0> .", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=startwith(<m0>)<STEP>result3=and(result1,result2)<STEP>result4=contain(result3)"}}{"translation": {"en": "lines that have the word <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines that have more than 5 words ending with a <M0>", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<m0>)<STEP>result3=contain(result2)<STEP>result4=repeatatleast(result3,6)"}}{"translation": {"en": "lines which have instances of <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines that contain <M0> between words <M1> and <M2> .", "regex": "result1=contain(<m1>)<STEP>result2=startwith(<m0>)<STEP>result3=startwith(<m2>)<STEP>result4=concat(result1,result2,result3)<STEP>result5=contain(<m2>)<STEP>result6=startwith(<m0>)<STEP>result7=startwith(<m1>)<STEP>result8=concat(result5,result6,result7)<STEP>result9=or(result4,result8)"}}{"translation": {"en": "lines that contain at least 1 word starting with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines containing <M0> and containing the word <M1>", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines that have at least 2 words that start with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)<STEP>result4=repeat(result3,2)"}}{"translation": {"en": "lines which have <M0>", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines where <M0> is separated from <M1> with a comma", "regex": "result1=contain(<m0>)<STEP>result2=startwith(<m1>)<STEP>result3=concat(result1,<m2>,result2)<STEP>result4=contain(<m1>)<STEP>result5=startwith(<m0>)<STEP>result6=concat(result4,<m2>,result5)<STEP>result7=or(result3,result6)"}}{"translation": {"en": "lines that end in <M0> and begins in <M1> .", "regex": "result1=startwith(<m1>)<STEP>result2=concat(result1,<m0>)"}}{"translation": {"en": "lines that start with <M0> and end in a number .", "regex": "result1=startwith(<m0>)<STEP>result2=concat(result1,<num>)"}}{"translation": {"en": "lines that contain the text <M0>", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines using 5 or more words .", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=contain(result1)<STEP>result3=repeat(result2,5)"}}{"translation": {"en": "lines containing the word <M0> and containing the word <M1>", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines using the word <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines containing words starting with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines containing at least 2 words", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=contain(result1)<STEP>result3=repeatatleast(result2,2)"}}{"translation": {"en": "lines that start with the letter <M0> .", "regex": "result1=startwith(<m0>)"}}{"translation": {"en": "lines containing <M0> and containing <M1> too", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines that contain <M0> or <M1> before <M2> .", "regex": "result1=or(<m0>,<m1>)<STEP>result2=contain(result1)<STEP>result3=startwith(<m2>)<STEP>result4=concat(result2,result3)"}}{"translation": {"en": "lines that have all the letters <M0>  , <M1> and <M2>", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=contain(<m2>)<STEP>result4=and(result1,result2,result3)"}}{"translation": {"en": "lines that contain words ending with vowels .", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<vow>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines which contain the word <M0> but do not contain the word <M1>", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=not(result2)<STEP>result4=and(result1,result3)"}}{"translation": {"en": "lines that have 3 characters after the first vowel", "regex": "result1=contain(<vow>)<STEP>result2=repeat(<any>,3)<STEP>result3=startwith(result2)<STEP>result4=concat(result1,result3)"}}{"translation": {"en": "lines that start with the letter <M0>", "regex": "result1=startwith(<m0>)"}}{"translation": {"en": "lines that start with <M0>", "regex": "result1=startwith(<m0>)"}}{"translation": {"en": "lines starting with <M0>", "regex": "result1=startwith(<m0>)"}}{"translation": {"en": "lines using <M0> before <M1>", "regex": "result1=contain(<m0>)<STEP>result2=startwith(<m1>)<STEP>result3=concat(result1,result2)"}}{"translation": {"en": "lines using <M0> and containing the words <M1> and <M2> .", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=contain(<m2>)<STEP>result4=and(result1,result2,result3)"}}{"translation": {"en": "lines that use words of at least 9 letters .", "regex": "result1=repeatatleast(<let>,9)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines using at least 5 <M0>", "regex": "result1=contain(<m0>)<STEP>result2=repeatatleast(result1,5)"}}{"translation": {"en": "lines that each begin with a vowel", "regex": "result1=startwith(<vow>)"}}{"translation": {"en": "lines using 7 <M0>", "regex": "result1=contain(<m0>)<STEP>result2=repeat(result1,7)"}}{"translation": {"en": "lines that start with words containing <M0> .", "regex": "result1=star(<let>)<STEP>result2=star(<let>)<STEP>result3=concat(result1,<m0>,result2)<STEP>result4=startwith(result3)"}}{"translation": {"en": "lines using 2 words or more", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=contain(result1)<STEP>result3=repeatatleast(result2,2)"}}{"translation": {"en": "lines that have at least 6 characters", "regex": "result1=repeatatleast(<any>,6)"}}{"translation": {"en": "lines that contain the word <M0> followed by at least 1 number .", "regex": "result1=contain(<m0>)<STEP>result2=startwith(<num>)<STEP>result3=concat(result1,result2)"}}{"translation": {"en": "lines that only have 3 words", "regex": "result1=notcc(<let>)<STEP>result2=star(result1)<STEP>result3=repeatatleast(<let>,1)<STEP>result4=notcc(<let>)<STEP>result5=star(result4)<STEP>result6=concat(result2,result3,result5)<STEP>result7=repeat(result6,3)"}}{"translation": {"en": "lines where the number <M0> appears", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines having <M0> after <M1> and <M2> before <M3> .", "regex": "result1=contain(<m1>)<STEP>result2=startwith(<m0>)<STEP>result3=concat(result1,result2)<STEP>result4=contain(<m2>)<STEP>result5=startwith(<m3>)<STEP>result6=concat(result4,result5)<STEP>result7=and(result3,result6)<STEP>result8=contain(result7)"}}{"translation": {"en": "lines not containing 4 or more characters", "regex": "result1=repeatatleast(<any>,4)<STEP>result2=contain(result1)<STEP>result3=not(result2)"}}{"translation": {"en": "lines that contain instances of <M0> , but only if its 1 of the first 3 words .", "regex": "result1=notcc(<let>)<STEP>result2=star(result1)<STEP>result3=repeatatleast(<let>,1)<STEP>result4=notcc(<let>)<STEP>result5=star(result4)<STEP>result6=concat(result2,result3,result5)<STEP>result7=repeatrange(result6,0,2)<STEP>result8=notcc(<let>)<STEP>result9=star(result8)<STEP>result10=startwith(<m0>)<STEP>result11=concat(result7,result9,result10)"}}{"translation": {"en": "lines that contain the text <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines which do not contain the letter <M0> .", "regex": "result1=contain(<m0>)<STEP>result2=not(result1)"}}{"translation": {"en": "lines containing words that start with <M0>", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that show the text <M0> and the word <M1> .", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines containing 5 letter words .", "regex": "result1=repeat(<let>,5)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines containing a word using the letters <M0> .", "regex": "result1=star(<let>)<STEP>result2=star(<let>)<STEP>result3=concat(result1,<m0>,result2)<STEP>result4=contain(result3)"}}{"translation": {"en": "lines containing at least 2 characters but not 4 characters or more", "regex": "result1=repeatrange(<any>,2,3)"}}{"translation": {"en": "lines using 6 instances of <M0>", "regex": "result1=contain(<m0>)<STEP>result2=repeat(result1,6)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that have <M0> before <M1> and <M2> after <M3> .", "regex": "result1=contain(<m0>)<STEP>result2=startwith(<m1>)<STEP>result3=concat(result1,result2)<STEP>result4=contain(<m3>)<STEP>result5=startwith(<m2>)<STEP>result6=concat(result4,result5)<STEP>result7=and(result3,result6)"}}{"translation": {"en": "lines containing at least 1 uppercase letter , and at least 1 lowercase letter", "regex": "result1=contain(<cap>)<STEP>result2=contain(<low>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines using words ending with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<m0>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that contain the word <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines that contain numbers", "regex": "result1=contain(<num>)"}}{"translation": {"en": "lines that contain the word <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines using the letter pair <M0>", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines that are composed of 5 words or less where at least 1 word begins with the letter <M0> .", "regex": "result1=notcc(<let>)<STEP>result2=star(result1)<STEP>result3=repeatatleast(<let>,1)<STEP>result4=notcc(<let>)<STEP>result5=star(result4)<STEP>result6=concat(result2,result3,result5)<STEP>result7=repeatrange(result6,0,5)<STEP>result8=star(<let>)<STEP>result9=concat(<m0>,result8)<STEP>result10=contain(result9)<STEP>result11=and(result7,result10)"}}{"translation": {"en": "lines that do not contain the character <M0>", "regex": "result1=contain(<m0>)<STEP>result2=not(result1)"}}{"translation": {"en": "lines that have a 2 letter sequence", "regex": "result1=repeat(<let>,2)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines that begin with a number", "regex": "result1=startwith(<num>)"}}{"translation": {"en": "lines that contain at least 2 words beginging with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)<STEP>result4=repeat(result3,2)"}}{"translation": {"en": "lines that have words with <M0> .", "regex": "result1=star(<let>)<STEP>result2=star(<let>)<STEP>result3=concat(result1,<m0>,result2)<STEP>result4=contain(result3)"}}{"translation": {"en": "lines that use words ending with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<m0>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines of 6 characters that end with the letter <M0> .", "regex": "result1=repeat(<any>,5)<STEP>result2=concat(result1,<m0>)"}}{"translation": {"en": "lines that contain words using <M0> in them .", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<m0>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines in which there are words that begin with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that contain words starting with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines which do not contain <M0>", "regex": "result1=contain(<m0>)<STEP>result2=not(result1)"}}{"translation": {"en": "lines that contain words ending with <M0> .", "regex": "result1=endwith(<m0>)<STEP>result2=repeatatleast(<let>,1)<STEP>result3=and(result1,result2)<STEP>result4=contain(result3)"}}{"translation": {"en": "lines which contain <M0> and <M1>", "regex": "result1=contain(<m0>)<STEP>result2=startwith(<m1>)<STEP>result3=concat(result1,result2)<STEP>result4=contain(<m1>)<STEP>result5=startwith(<m0>)<STEP>result6=concat(result4,result5)<STEP>result7=or(result3,result6)"}}{"translation": {"en": "lines which contain <M0>", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines containing only a letter", "regex": ""}}{"translation": {"en": "lines that contain words ending in <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<m0>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines which do not have <M0> .", "regex": "result1=contain(<m0>)<STEP>result2=not(result1)"}}{"translation": {"en": "lines that start with a <M0> and end with an <M1> .", "regex": "result1=startwith(<m0>)<STEP>result2=concat(result1,<m1>)"}}{"translation": {"en": "lines containing an instance of the name <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines using <M0> before <M1>", "regex": "result1=contain(<m0>)<STEP>result2=startwith(<m1>)<STEP>result3=concat(result1,result2)"}}{"translation": {"en": "lines using words starting with <M0> .", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=startwith(<m0>)<STEP>result3=and(result1,result2)<STEP>result4=contain(result3)"}}{"translation": {"en": "lines that contain the letter <M0> and the number <M1> .", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=and(result1,result2)"}}{"translation": {"en": "lines which contain the letter <M0> preceded by a letter .", "regex": "result1=contain(<let>)<STEP>result2=startwith(<m0>)<STEP>result3=concat(result1,result2)"}}{"translation": {"en": "lines that do not contain the word <M0>", "regex": "result1=contain(<m0>)<STEP>result2=not(result1)"}}{"translation": {"en": "lines that contain the letter <M0> followed by a vowel .", "regex": "result1=contain(<m0>)<STEP>result2=startwith(<vow>)<STEP>result3=concat(result1,result2)"}}{"translation": {"en": "lines which begin with the word <M0>", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=and(result1,<m0>)<STEP>result3=startwith(result2)"}}{"translation": {"en": "lines that contain words starting with <M0> .", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=startwith(<m0>)<STEP>result3=and(result1,result2)<STEP>result4=contain(result3)"}}{"translation": {"en": "lines which begin with <M0>", "regex": "result1=startwith(<m0>)"}}{"translation": {"en": "lines that have the number <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines having words ending with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<m0>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that contain words with <M0> .", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=contain(<m0>)<STEP>result3=and(result1,result2)<STEP>result4=contain(result3)"}}{"translation": {"en": "lines that contain <M0> at the end of every word .", "regex": "result1=repeatatleast(<let>,1)<STEP>result2=endwith(<m0>)<STEP>result3=not(result2)<STEP>result4=and(result1,result3)<STEP>result5=contain(result4)<STEP>result6=not(result5)"}}{"translation": {"en": "lines containing a letter", "regex": "result1=contain(<let>)"}}{"translation": {"en": "lines containing words that start with <M0>", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that have 2 words containing 5 or more letters .", "regex": "result1=repeatatleast(<let>,5)<STEP>result2=contain(result1)<STEP>result3=repeat(result2,2)"}}{"translation": {"en": "lines ending with <M0>", "regex": "result1=endwith(<m0>)"}}{"translation": {"en": "lines that contain words starting with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines containg the number <M0> .", "regex": "result1=contain(<m0>)"}}{"translation": {"en": "lines that contain words ending in <M0>", "regex": "result1=star(<let>)<STEP>result2=concat(result1,<m0>)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that have 3 numbers and contain the word <M0> .", "regex": "result1=contain(<num>)<STEP>result2=repeat(result1,3)<STEP>result3=contain(<m0>)<STEP>result4=and(result2,result3)"}}{"translation": {"en": "lines using a word containing the letter <M0> .", "regex": "result1=star(<let>)<STEP>result2=star(<let>)<STEP>result3=concat(result1,<m0>,result2)<STEP>result4=contain(result3)"}}{"translation": {"en": "lines containing 3 vowels", "regex": "result1=contain(<vow>)<STEP>result2=repeat(result1,3)"}}{"translation": {"en": "lines containing <M0> or <M1>", "regex": "result1=or(<m0>,<m1>)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines that contain a number ending with <M0>", "regex": "result1=star(<num>)<STEP>result2=endwith(result1)<STEP>result3=startwith(<m0>)<STEP>result4=concat(result2,result3)"}}{"translation": {"en": "lines that contain the phrase <M0> or <M1> .", "regex": "result1=or(<m0>,<m1>)<STEP>result2=contain(result1)"}}{"translation": {"en": "lines that contain a number and contain a 3 letter word .", "regex": "result1=repeat(<let>,3)<STEP>result2=contain(result1)<STEP>result3=contain(<num>)<STEP>result4=and(result2,result3)"}}{"translation": {"en": "lines that use words starting with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines which have a <M1> after a <M0> .", "regex": "result1=contain(<m0>)<STEP>result2=startwith(<m1>)<STEP>result3=concat(result1,result2)"}}{"translation": {"en": "lines with <M1> where the word <M0> comes before <M1> .", "regex": "result1=contain(<m1>)<STEP>result2=contain(<m0>)<STEP>result3=startwith(<m1>)<STEP>result4=concat(result2,result3)<STEP>result5=and(result1,result4)"}}{"translation": {"en": "lines which contain only vowels .", "regex": "result1=star(<vow>)"}}{"translation": {"en": "lines that contain words starting with <M0> .", "regex": "result1=star(<let>)<STEP>result2=concat(<m0>,result1)<STEP>result3=contain(result2)"}}{"translation": {"en": "lines that have <M0> but not <M1>", "regex": "result1=contain(<m0>)<STEP>result2=contain(<m1>)<STEP>result3=not(result2)<STEP>result4=and(result1,result3)"}}